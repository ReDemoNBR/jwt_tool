## declare GitLab job templates
include:
  - template: Jobs/Secret-Detection.gitlab-ci.yml

default:
  image: docker:latest

.tag_images: &tag_images
  - tags=""
  - |
    for alias in $TAG ${ALIASES//,/ }; do
      tags="${tags:+$tags,}$alias"
    done
  - |
    for variant in ${variants//,/ }; do
      tags="${tags:+$tags,}$variant-$TAG"
      [ "$TAG" == "$DEFAULT_VARIANT" ] && tags="${tags:+$tags,}$variant"
    done

stages:
  - test
  - build
  - audit
  - publish

variables:
  # networking for job isolation
  FF_NETWORK_PER_BUILD: 1
  # Force Docker builds to use BuildKit
  DOCKER_BUILDKIT: 1
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  JWT_TOOL_VERSION: 2.2.4
  DEFAULT_VARIANT: bullseye
  PRIVATE_IMAGE_NAME: $CI_REGISTRY/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
  PUBLIC_IMAGE_NAME: redemonbr/jwt-tool

hadolint:
  stage: test
  image: hadolint/hadolint:latest-alpine
  script:
    - find ./ -type f -name "Dockerfile*" | xargs hadolint

yamllint:
  stage: test
  image: sdesbure/yamllint
  script:
    - yamllint --strict ./

## This is an extension from the templated job from GitLab CI
.secret-analyzer:
  allow_failure: false
  dependencies: []

secret_detection:
  stage: test
  rules:
    - when: on_success

.build:
  stage: build
  variables:
    FILE: Dockerfile
    TAG: ""
    ALIASES: ""
  services:
    - name: docker:dind
      alias: dind
      command: ["--tls=false", "--host=tcp://0.0.0.0:2375"]
  before_script: &before_script
    - docker login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - major=$(echo $JWT_TOOL_VERSION | cut -d. -f1)
    - minor=$(echo $JWT_TOOL_VERSION | cut -d. -f2)
    - patch=$(echo $JWT_TOOL_VERSION | cut -d. -f3)
    - variants="$major,$major.$minor,$major.$minor.$patch"
  script:
    - *tag_images
    - args=""
    - for tag in ${tags//,/ }; do args="$args --tag $PRIVATE_IMAGE_NAME:$tag"; done
    - echo $args . | xargs docker build --file $FILE
    - docker push --all-tags $PRIVATE_IMAGE_NAME

build:debian:
  extends: .build
  variables:
    TAG: bullseye
    ALIASES: latest

build:alpine:
  extends: .build
  variables:
    FILE: Dockerfile-alpine
    TAG: alpine

.audit:grype:
  stage: audit
  image: alpine:latest
  variables:
    TAG: ""
    GRYPE_REGISTRY_AUTH_AUTHORITY: $CI_REGISTRY
    GRYPE_REGISTRY_AUTH_USERNAME: $CI_REGISTRY_USER
    GRYPE_REGISTRY_AUTH_PASSWORD: $CI_REGISTRY_PASSWORD
  before_script:
    # Download grype (anchore/grype)
    - apk add --no-cache curl
    # yamllint disable-line rule:line-length
    - curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/bin
  script:
    - grype --file grype-$TAG-$CI_COMMIT_SHORT_SHA.txt registry:$PRIVATE_IMAGE_NAME:$TAG
  artifacts:
    paths:
      - grype-*.txt
    expire_in: 30 days
    when: always
    public: true

audit:grype:debian:
  extends: .audit:grype
  variables:
    TAG: bullseye

audit:grype:alpine:
  extends: .audit:grype
  variables:
    TAG: alpine

.publish:
  stage: publish
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  services:
    - name: docker:dind
      alias: dind
      command: ["--tls=false", "--host=tcp://0.0.0.0:2375"]
  variables:
    TAG: ""
    ALIASES: ""
  before_script:
    - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
    - *before_script
    - docker pull $PRIVATE_IMAGE_NAME:$JWT_TOOL_VERSION-$TAG
  script:
    - *tag_images
    - |
      for tag in ${tags//,/ }; do
        docker tag $PRIVATE_IMAGE_NAME:$JWT_TOOL_VERSION-$TAG $PUBLIC_IMAGE_NAME:$tag
      done
    - docker push --all-tags $PUBLIC_IMAGE_NAME

publish:debian:
  extends: .publish
  variables:
    TAG: bullseye
    ALIASES: latest

publish:alpine:
  extends: .publish
  variables:
    TAG: alpine
